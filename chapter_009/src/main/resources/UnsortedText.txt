Для начала, если вы думаете, что изучения основ компьютерных наук хватит для того,
чтобы вам посыпались предложения от разных компаний, вы можете закончить читать здесь.
Это руководство предназначено для тех, кто хочет обеспечить себя необходимыми навыками для того,
чтобы без проблем пройти собеседование с помощью LeetCode.

Оттачивать навыки написания кода на LeetCode — это не просто запоминать ответы.
Вам нужно знать шаблоны решения задач и уметь их применять. Количество решённых задач
— это только одна сторона знакомства с шаблонами, но изучение включает в себя не только числа.

Пункт 0: За пределами основ компьютерных наук
В этом руководстве предполагается, что вы по крайней мере слышали об основных вещах,
таких как двойные указатели и манипулирование битами. Вам не нужно знать их в совершенстве,
но хотя бы базовые знания о том, что это такое, помогут вам более эффективно практиковаться решать задачи на LeetCode.
Если вы изучали только основы компьютерных наук, вам может понадобиться обратиться к некоторым книгам,
чтобы немного подтянуться.

Легкие алгоритмические задачи на LeetCode
Легкие задачи призваны помочь вам ознакомиться с основными приёмами.
Обычно у них есть грубые тривиальные решения. Вам нужно научиться применять эти приёмы,
чтобы лёгкие задачи не вызывали у вас никаких проблем.

Пункт 1: Практика основных приёмов
Если случайно открывая несколько простых задач из структур данных или алгоритмов вы можете легко и
быстро придумать оптимальное решение,
после чего реализовать его, вы можете переходить к следующему пункту.
Если же нет, то вам очевидно придётся задержаться и больше тренироваться решать лёгкие задачи.

Как тренироваться
Отсортируйте задачи по убыванию рейтинга принятия (англ. acceptance rate).
Обычно задачи с более высоким рейтингом принятия немного легче.
Старайтесь решать лёгкие задачи без подсказок.
Как ни странно, злоупотреблять кнопкой «run» не очень полезно.
Попробуйте написать решение лёгких задач так, чтобы они были приняты с первого раза.
Такой подход имитирует ситуацию, когда вы пишете код на доске, что позволит вам научиться рассматривать
все варианты сразу в голове.
Иногда следует приглядываться к решениям в топе на предмет применения каких-то интересных приёмов.
Часто решения попадают в топ, когда они короткие и недостаточно документированы. Также читайте комментарии
и не стесняйтесь просить пояснить какие-то моменты.
Как только вы чувствуете что изучили достаточно шаблонов решений простых задач, вернитесь к пункту 1
и решите, готовы ли вы двигаться дальше.
Средние алгоритмические задачи на LeetCode
Средние задачи предназначены для того, чтобы вы научились видеть суть.
Чаще всего они представляют собой различные комбинации лёгких задач.
Но решения «в лоб» часто могут привести к ошибке времени выполнения.
Вам нужно уметь определять, какой именно шаблон решения требует та или иная задача.

Пункт 2: Распознавание шаблонов задач
Если случайно открывая несколько средних задач из структур данных или алгоритмов, вы можете определить,
какой вид задач в них представлен, и реализовать близкое к оптимальному решение в течение получаса, то смело переходите к более высокому уровню.

Как тренироваться
Внимательно читайте сам текст задачи и ищите в нём подсказки по поводу реализации. Например,
количество подзадач может указывать на динамическое программирование, строковое преобразование с
помощью dictionary указывает на поиск в ширину, поиск в длину или префиксное дерево,
поиск повторяющихся или уникальных элементов указывает на хеширование или манипулирование битами и т. д.
Если вам требуется более полный список приёмов, то следует обратить внимание на книгу-руководство для программистов.
Когда есть приблизительное представление о решении — это уже полпути. Попытайтесь реализовать его,
даже если оно не совсем оптимальное. Это нормально, ведь обычно люди тратят гораздо больше времени на оптимизацию,
чем на само решение.
Когда вы реализовали своё неидеальное решение, посмотрите на топовые решения этой же задачи, чтобы посмотреть,
как вы можете улучшить своё.
Затем попытайтесь хорошо понять основную мысль и реализовать более оптимальное решение, не используя подсказки.
Как только вы чувствуете, что можете больше, чем просто применять шаблоны, настало время перейти к сложным задачам.
Сложные алгоритмические задачи на LeetCode
Сложные задачи предназначены для того, чтобы заставить вас напрячься. Обычно 45 минут достаточно для того,
чтобы вы могли придумать рабочее решение. Чтобы научиться их решать, нужно научиться видеть какие-то более
изящные пути, чем тривиальное решение «в лоб».

Пункт 3: Последняя проверка
В сложных задачах обычно есть ограничения, которые не позволят вам получить решения, используя привычные шаблоны.
Если вы можете модифицировать обычные приёмы для решения сложных задач, то ваша подготовка завершена. Время здесь
не так важно, вы должны научиться видеть связь между привычными шаблонами решений и этими ограничениями.

Как тренироваться
В этом случае решение задачи важнее, чем нахождение оптимального решения. Если вы можете решить задачу «в лоб»,
жертвуя ограничениями по времени и/или месту, делайте это.
И только после нужно определить, как оптимизировать решение, чтобы оно соответствовало ограничениям.
Если у вас не получается оптимизировать решение, то самое время обратить внимание на топовые варианты реализации.
Здесь очень важно понять ход решения. Вы должны научиться подбирать правильный алгоритм и
использовать нужные структуры данных, а также уметь учитывать все случаи.
Как только вы научитесь находить решения одних сложных задач, переходите к другим видам задач и
старайтесь делать ваши решения более оптимальными.
Спасибо, что прочитали. Надеюсь вы нашли для себя что-то полезное.